## Haiku Generic Jamfile v1.0 ##

## Fill in this file to specify the project being created, and the referenced
## Jamfile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of BeOS and Haiku.

## Application Specific Settings ---------------------------------------------

# Specify the name of the binary
#	If the name has spaces, you must quote it: "My App"
NAME =  "Puri" ;

# Specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE =  APP ;

# Specify the source files to use
#	Full paths or paths relative to the Jamfile can be included.
# 	All files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this Jamfile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.
# Ex: SRCS = file1.cpp file2.cpp file3.cpp ;
SRCS =
	BackBoard.cpp
    BlinkerView.cpp
	BoardWindow.cpp
	ChessBoardView.cpp
	Engine.cpp
    EngineOutputView.cpp
	ICS.cpp
    ICSChallengesView.cpp
    ICSChannelsView.cpp
    ICSChatView.cpp
	ICSMainWindow.cpp
    ICSEventCalendarView.cpp
    ICSFormulaWindow.cpp
	ICSGamesView.cpp
	ICSInboxView.cpp
    ICSInfoView.cpp
	ICSOutboxView.cpp
    ICSPlayersView.cpp
    ICSRoomsView.cpp
    ICSSeekWindow.cpp
    ICSTabsToolBar.cpp
   	ICSTXTControl.cpp
	ImageButton.cpp
    IntroWindow.cpp
	main.cpp
	MaterialView.cpp
	Model3DS.cpp
	MovesView.cpp
	NavigationView.cpp
	PromotionWindow.cpp
	PngLoad.cpp
	SidebarView.cpp
	TimeView.cpp
	ToolBar.cpp
    Tools.cpp
	;

# Specify the resource files to use
#	Full path or a relative path to the resource file can be used.
RSRCS = Resources.rsrc  ;

# Specify additional libraries to link against
#	There are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS =  be png GL GLU glut 3ds stdc++
        translation game network columnlistview
        ;

# Specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the Jamfile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS = ./libs/bin ;

# Additional paths to look for system headers
#	These use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS =  ;

# Additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS = ./libs/header  ;

# Specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE = FULL ;

# Specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.

DEFINES =  DEBUG=0 VERSION=0.391 ;

# Specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS = ALL ;

# Specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS =  TRUE ;

# Specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER = TRUE  ;

# Specify additional compiler flags for all files :
COMPILER_FLAGS = -Wfatal-errors -std=c++0x ;

# Specify additional linker flags
LINKER_FLAGS =  ;

# (for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH =  ;

## Include the Jamfile-engine
include ./Jamfile-engine ;
